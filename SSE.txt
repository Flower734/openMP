#include iostream
#include fstream
#include vector
#include math.h
#include time.h
#include string
#include string.h
#include sstream
#include algorithm
#include pthread.h
#include windows.h
#include stdio.h
#include stdlib.h
#include omp.h
#include smmintrin.h
#include nmmintrin.h
#include xmmintrin.h
#include emmintrin.h
#include pmmintrin.h
#include tmmintrin.h
#include immintrin.h
#define MAXSIZE 2000
#define NUM_THREADS 4
using namespace std;
using stdvector;
class index {
public
	int len = 0;
	vectorunsigned int arr;
};
vectorindex idx;

bool operator(const index& s1, const index& s2)
{
	return s1.len  s2.len; 从小到大排序
}

vectorunsigned int S;
index s0 = new index[NUM_THREADS];

vectorunsigned int& ADP1(int list, vectorindex& idx, int num)
{
	bool found = true;
	vectorindex idx_;
	int i = 0, t = 0, j = 0, k = 0, m;
	bool parallel = true;
#pragma omp parallel if(parallel),num_threads(NUM_THREADS),private(i,j,t,k,m)
#pragma omp single
	for (k = 0; k  num; k++)
	{
		idx_.push_back(idx[list[k]]);
	}
	sort(idx_.begin(), idx_.end());
#pragma omp for
	for (t = 0; t  idx_[0].len; t++)
	{
		unsigned int e = idx_[0].arr[t];
		__m128i qwq;
		qwq = _mm_set1_epi32(e);

		for (i = 1; i  num; i++) {
			int length = ceil(idx_[i].len  4)  4;
			for (int m = idx_[i].len; m  length; m++)
				idx_[i].arr[m] = 0;

			found = false;

			for (int j = 0; j  idx_[i].len && idx_[i].arr[j]=e ; j += 4)
			{
				found = false;
				__m128i ewe, result;
				ewe = _mm_loadu_epi32(&idx_[i].arr[j]);
				result = _mm_set1_epi32(0);
				result = _mm_sub_epi32(ewe, qwq);
				int res[4] = { 0 };
				_mm_storeu_si64(&res[0], result);
				_mm_storeu_si64(&res[2], result);
				for (k = 0; k  4; k++) {
					if (res[k] == 0) {
						found = true;
						break;
					}
				}
			}

			if (found == false) {
				break;
			}
		}
		if (found == true) {
			S.push_back(e);
		}
	}
	return S;
}

vectorunsigned int& ADP2(int list, vectorindex& idx, int num)
{
	bool found = true;
	vectorindex idx_;
	vectorunsigned int ans;
	bool parallel = true;
	for (int k = 0; k  num; k++)
	{
		idx_.push_back(idx[list[k]]);
	}
	sort(idx_.begin(), idx_.end());
	index s = idx[list[0]];
	int i, j, m, t, k;
#pragma omp parallel num_threads(NUM_THREADS)
     shared(s,idx_,num,list,ans),private(i,j,m,t,k)
#pragma omp for
	for (int t_id = 0; t_id  NUM_THREADS; t_id++) {

		int start = (s.arr.size()  NUM_THREADS)  t_id;
		int _end;
		if (t_id == NUM_THREADS - 1) {
			_end = s.arr.size();
		}
		else {
			_end = start + (s.arr.size())  NUM_THREADS;
		}
		s0[t_id].arr.assign(s.arr.begin() + start, s.arr.begin() + _end);
		s0[t_id].len = s0[t_id].arr.size();
		for ( i = 0; i  s0[t_id].len; i++) {
			遍历每个list，判断s0[t_id].arr[i]是否出现在其他数组
			unsigned int e = s0[t_id].arr[i];
			__m128i qwq;
			qwq = _mm_set1_epi32(e);

			bool found = false;
			for ( j = 1; j  num; j++) {
				从第1个数组开始遍历，如果第一个中就没有，则退出循环int length = ceil(idx_[i].len  4)  4;
				int length = ceil(idx_[j].len  4)  4;
				for ( m = idx_[j].len; m  length; m++)
					idx_[j].arr[m] = 0;

				for ( t = 0; t  idx_[j].len; t += 4)
				{
					found = false;
					__m128i ewe, result;
					ewe = _mm_loadu_epi32(&idx_[j].arr[t]);
					result = _mm_set1_epi32(0);
					result = _mm_sub_epi32(ewe, qwq);
					int res[4] = { 0 };
					_mm_storeu_si64(&res[0], result);
					_mm_storeu_si64(&res[2], result);
					for (k = 0; k  4; k++) {
						if (res[k] == 0) {
							found = true;
							break;
						}
					}
				}

				if (found == false) {
					break;
				}
			}
			if (found == true) {
#pragma omp single
				ans.push_back(s0[t_id].arr[i]);
			}
		}

	}

	return S;
}

class BitMap
{
public
	BitMap(int range)
	{
		开辟空间
		this-m_bits.resize(range  32 + 1);
		this-fir_index.resize(range  1024 + 1);
		this-sec_index.resize(range  32768 + 1);
	}

	void set(int data)
	{
		int index0 = data  32; 数组索引即区间
		int index1 = index0  1024;
		int index2 = index1  1024;
		int temp0 = data % 32; 具体位置索引
		int temp1 = temp0  32;
		int temp2 = temp1  32;

		this-m_bits[index0] = (1  temp0); 左移4位置为1
		this-fir_index[index1] = (1  temp1);
		this-sec_index[index2] = (1  temp2);
	}

	void reset(int data)
	{
		int index = data  32;
		int temp = data % 32;
		this-m_bits[index] &= ~(1  temp); 取反
	}
	vectorint m_bits;
	vectorint fir_index;
	vectorint sec_index;
};
BitMap s_(30000000);
vectorindex idx_;
void compare(int list, vectorindex& idx, int num)
{

	for (int i = 0; i  num; i++)
	{
		idx_.push_back(idx[list[i]]);
	}
	sort(idx_.begin(), idx_.end());
	vectorBitMap bitmap;
	for (int i = 0; i  num; i++)
	{
		bitmap.push_back(30000000);
		for (int j = 0; j  idx_[i].len; j++)
		{
			bitmap[i].set(idx_[i].arr[j]);
		}
	}
	int count = 0;
	bool isExist = false;
	s_ = bitmap[0];
	int i, j, t, l;
	bool parallel = true;
#pragma omp parallel if (parallel),num_threads(4),private(i,j,t,l)
#pragma omp for
	for (i = 1; i  num; i++)
	{
		for (j = 0; j  bitmap[0].sec_index.size(); j++)
		{
			if ((s_.sec_index[j] ^ bitmap[i].sec_index[j]) == 0 && s_.sec_index[j] != 0)��λ���
			{
				for (t = j  32; t  j  32 + 32; t++)
				{
					if ((s_.fir_index[t] ^ bitmap[i].sec_index[t]) == 0 && s_.fir_index[t] != 0)
					{
						for (l = t  32; l  t  32 + 32; l++)
							if ((s_.m_bits[l] ^ bitmap[i].m_bits[l]) == 0 && s_.m_bits[l] != 0)
								isExist = true;
					}
				}
			}
			if (isExist == false)
			{
				s_.sec_index[j] = 0;
			}
		}
	}
}
int main() {

	fstream file;
	file.open(ExpIndex, iosbinary  iosin);
	if (!file.is_open()) {
		cout  No file;
		return 0;

	}

	for (int i = 0; i  2000; i++) {
		index temp;
		file.read((char)&temp.len, sizeof(temp.len));
		for (int j = 0; j  (temp.len); j++)
		{
			unsigned int binary_temp;
			file.read((char)&binary_temp, sizeof(binary_temp));
			temp.arr.push_back(binary_temp);
		}
		idx.push_back(temp);
	}
	file.close();
	---------------------------------------------------------------------------------------------------------
	file.open(ExpQuery, iosin);
	int query[1000][5] = { 0 };
	string line;
	int count = 0;
	while (getline(file, line)) {
		stringstream ss; ������
		ss  line; �����д�ֵ
		int a = 0;
		while (!ss.eof()) {
			int temp;
			ss  temp;
			query[count][a] = temp;
			a++;
		}
		count++;
	}
	-----------------------------------------------------------------------------------------------------------


	LARGE_INTEGER freq;
	LARGE_INTEGER start_t, stop_t;
	double exe_time;
	QueryPerformanceFrequency(&freq);
	QueryPerformanceCounter(&start_t);
	for (int i = 0; i  20; i++) {
		int num = 0;
		for (int j = 0; j  5; j++) {
			if (query[i][j] != 0) {
				num++;
			}
		}
		int list = new int[num];
		for (int j = 0; j  num; j++) {
			list[j] = query[i][j];
		}
		ADP2(list, idx, num);
	}
	QueryPerformanceCounter(&stop_t);
	exe_time = 1e3  (stop_t.QuadPart - start_t.QuadPart)  freq.QuadPart;
	fprintf(stdout, Your program executed time is %fms.n, exe_time);
	return 0;
}
